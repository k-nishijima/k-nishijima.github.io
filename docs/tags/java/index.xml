<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Archived my historic blog</title>
    <link>https://k-nishijima.github.io/tags/java/</link>
    <description>Recent content in java on Archived my historic blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 09 Aug 2014 16:40:00 +0900</lastBuildDate>
    
	<atom:link href="https://k-nishijima.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dockerイメージがイミュータブルじゃ無くなった話</title>
      <link>https://k-nishijima.github.io/2014/08/blogspot-2014-08-09-unke-deploy/</link>
      <pubDate>Sat, 09 Aug 2014 16:40:00 +0900</pubDate>
      
      <guid>https://k-nishijima.github.io/2014/08/blogspot-2014-08-09-unke-deploy/</guid>
      <description>沖縄のお盆は旧暦の7月13日から15日、ということで2014年は8月8日（つまり昨日）がウンケー（お迎え）でした。
そんな日にデプロイ作業をしてたからハマった（？）のかどうか知りませんが、Docker on Elastic Beanstalkの小咄を1つ。

プロダクション環境でDockerを利用している方は、ビルドの時間を短縮するためにだいたいこんな感じでイメージを作っているかと思います。

弊社の場合は、それぞれにこんなものが入っています。
 baseにはJava環境やsupervisord/sshdなど、どんな場合でも絶対使うもの（最近ここにcronを入れましたw） appenvにはアプリケーション環境に固有なユーザやミドルウェアなど。例えばgvmやvert.xなどが含まれます。 latestには最新のアプリそのものと一緒に、Elastic Beanstalkにデプロイします  latestのビルド時間を出来うる限り短縮したい、という話ですね。
で、それぞれのイメージのビルド周期は図のように、右に行くほど頻繁にビルドされます。と言うか左の2つは必要がなければいじりません。
んで、最近のミドルウェアには大概自動アップデートの機能が付いているかと思います。gvmにもご多分に漏れず、付いています。
ということは、appenvのイメージを作った時点では最新だったけど、latestを作った時にミドルウェアの自動アップデートが走って、もしアップデートが提供されていたら？

はい、Immutable Infrastructureだったつもりのイメージが、時期によっていきなり自分自身で更新が掛かって壊れてしまいますね！（汗）
ううむ、そうならないようにアップデートoffにしたり、オフラインの設定にしていたんですが、そのオプションが効いてなかったのか、、、gvmやるな（違）。
（健気に標準入力で「アップデートする？」って聞いてきて Beanstalkのデプロイがコケたのは秘密です。）</description>
    </item>
    
    <item>
      <title>Java使いならJMXを使おう その1</title>
      <link>https://k-nishijima.github.io/2013/05/blogspot-2013-05-22-jmx/</link>
      <pubDate>Wed, 22 May 2013 22:50:00 +0900</pubDate>
      
      <guid>https://k-nishijima.github.io/2013/05/blogspot-2013-05-22-jmx/</guid>
      <description>始まりは某イベントをtwitterでエア参加していてTLに流れてきたこの一言、
 監視大事。JMXは知名度ないけどいいよねー #jdt2013
— 山本裕介さん (@yusuke) 2013年5月14日
 えぇ〜、そうだったのか！？JDK1.5の頃から、J2EEだともっと前からあるのに！！！ということで、切腹、もとい
 JMXほんとに知名度イマイチなのかな。ブログ書いてやろうか
— 西島 幸一郎さん (@k_nishijima) 2013年5月14日
 の責任をとって、遅くなりましたがちょっと書いてみます。

JMXとは JSR3というとんでも無いナンバリングで、既に歴史ある仕様だってことが分かるのですが、細かい話はググるかwikipediaを参照してみて下さい。
Java開発者にとってみると、ざっくり「稼働中のJVMに繋いで内部状態を取得したり、メソッド呼んだり出来る便利API」という言い方になるかと思います。
一番身近なのは恐らく jconsole で実行プロセスに接続して、メモリとかスレッドとか監視するかと思いますが、こいつのMBeanタブで見えるものがそれです。
    jconsole を起動してプロセスに接続するとJVMの内部状態が見える        JMX経由で取得した値。これはRuntimeを表示した例    jconsoleを知らない！？ もしも万が一、jconsoleを知らないという方がいたら多分当社比1万時間くらい損してますので、できるだけ早く本家ドキュメントなどを参考にして、使ってみて下さい。
これで例えば、開発環境でTomcatを使っていたとすると、こんな感じでアクティブなセッション数とかが取れるわけですね。
    作為的すぎてスンマセン。アクティブセッションが1です    で、ナニが嬉しいの？  稼働中のJVMのメソッドが呼べる  例えば稼働中にログレベルを変更したり、何かやばそうだからGC呼んでみたり、MBean経由で外部に公開されているものであればなんでも出来ます。自分の場合は色々各種サーバを書くことが多いので、その管理者向け機能を公開したりします（管理者しか使わない機能でGUIに乗せるのが面倒だったり、、、）。
設定変更や動作に直結する変更でも、いちいち再起動する必要がないのでとても便利です。
 稼働中のJVMの内部状態が見える  先程からの繰り返しになりますが、例えばメモリ使用量、スレッド数、アクティブセッション数やエラー数など、これもMBeanインターフェイスが提供してくれるものであればなんでも取ることができます。
MBeanインターフェイスとその実装 MBeanインターフェイスと言っても、実体は単なるインターフェイスです。例えば例としてこんなの。これは例えばFTPサーバの起動後の経過時間や、転送バイト数などを返すインターフェイスだと思って下さい。setEchoMessageなんていう内部変数を書き換えるメソッドも見えます
public interface HogeFTPServerMBean { public String getUptime(); public int getReadBytes(); public int getWrittenBytes(); public void setEchoMessage(String msg); }  で、これをimplementsしたサーバを書いて、それが起動する際に</description>
    </item>
    
    <item>
      <title>JavaのURLクラスでS3プロトコルを実装するときに気をつけること</title>
      <link>https://k-nishijima.github.io/2012/12/blogspot-2012-12-08-javaurls3/</link>
      <pubDate>Sat, 08 Dec 2012 22:40:00 +0900</pubDate>
      
      <guid>https://k-nishijima.github.io/2012/12/blogspot-2012-12-08-javaurls3/</guid>
      <description>気づいたら埋まってしまっていたAWS Advent Calendar 2012向けのネタをひとつ。
明日はCDP Advent Calendarネタを書きますが、今日はこっちで。
 2012年12月17日追記：
@DQNEOさんより「正しくはプロトコルじゃなくてURIスキームじゃね？」とツッコミをいただきました。はい、そうです、転送に使うプロトコルは実際は http or https ですので、httpやs3と表記する部分はURI(URL)スキーム、というのが正しいです。皆さん見たことあると思いますが、詳細はjavadocを参照してください。
ですが「オレオレURIプロトコルスキーム」って言うのが語呂が悪いので（笑）、以下全部は変更しませんが、脳内変換してくださいませm(_ _)m JavaでAWSを触っている方は、s3cmdと互換のS3プロトコルプロトコルスキームを普通に自分のコードの中で扱えるようにしますよね？ね？
例えばこんな感じの「new URL(&amp;ldquo;s3://yourBucketName/key/path/object.txt&amp;rdquo;)」みたいに、URLクラスで透過的に扱いたいですよね？（ゴリ押し）
Javaの世界では、s3://などと表記されるプロトコルスキームも当然自分で実装出来るので、どんなオレオレプロトコルだろうが透過的にURLクラスの上で取り扱えます。例えばこんな感じのハンドラを書きます。
public class S3StreamHandler extends URLStreamHandler { /** * @see java.net.URLStreamHandler#openConnection(java.net.URL) */ @Override protected URLConnection openConnection(URL url) throws IOException { return new URLConnection(url) { AmazonS3 s3 = AWSUtil.createS3Client(); S3Object object = null; /** * @see java.net.URLConnection#connect() */ public void connect() throws IOException { object = s3.getObject(url.getHost(), url.getPath().substring(1)); if (object == null) { throw new FileNotFoundException(url.</description>
    </item>
    
    <item>
      <title>第3回沖縄Web＋DB勉強会 &amp; JavaKuche勉強会初参加</title>
      <link>https://k-nishijima.github.io/2012/11/blogspot-2012-11-25-3webdb-javakuche/</link>
      <pubDate>Sun, 25 Nov 2012 12:29:00 +0900</pubDate>
      
      <guid>https://k-nishijima.github.io/2012/11/blogspot-2012-11-25-3webdb-javakuche/</guid>
      <description>この3連休、勉強会が2連チャン（つながってはないけど）でハシゴしてきました。
まずは22日木曜日、第3回沖縄Web＋DB勉強会で軽く喋ってきました。まとめ（と言っても僕と秀策さんしか呟いてないけど。。。(^^ゞ）はこちら。なんでかなー、ネットがないといってもあまりに寂しい気がする。。。けど、なんか、そもそもそういう文化がなさそうだ、というのがここ数ヶ月お邪魔して喋らせていただいた印象。まあそっと社内のIRCサーバにログが残ってたりするのかもしれませんが。。。
そして昨日24日の土曜日は、第16回JavaKuche勉強会「JavaOne2012 報告会 &amp;amp; Java における HTML5 勉強会」でした。@yoshioterada さんが来沖ですよ！これは意地でも行かねば、ということで当初都合が悪かったのですがブッキングを修正して何とか行って来ました。まとめはこちら。
場所は先週のJAWS−UGに引き続き、琉球大学さんでした。安定の無線LANのご提供、ありがとうございました！

んで、22日のLTの資料はこちら。
2012年11月22日 オンプレからクラウドへの移行の実際（概要編） from Koichiro Nishijima
まあ頑張ってるから応援してね、的な内容で、反応も「よく分からずポカーン状態」で、ちょっとパンチが足りなかったのが残念。まあこういう事も良くありますわ。
他の皆様のLT、特に新垣さんの社外のシステムを加工するのにGreasemonkeyを実際使ってます、というのは目からウロコで衝撃でした。なるほどなんでもできるから、そういう手もありなのね、と感心しました。
24日のJavaKucheは飛び入りでLTしようかなーと思ってた隙に閉められてしまったので資料は無し。寺田さんの資料はあとから公開されたりするのかしら？|дﾟ)ﾁﾗｯ
今回のJavaKucheは（寺田さんが来てるので当たり前だけど）近頃なかなか無い『JavaがDISられない勉強会』として僕自身は非常に幸せでした(^^)
サンフランシスコで行われたJavaOne2012の熱い雰囲気もよく分かったし、Javaの今後のロードマップもざっくり知ることが出来たし。
JavaFXの成熟とかProject Avatarみたいな実験プロジェクトもドキドキワクワクしますが、Webとかクライアントサイドとかメンドイのでもう正直どうでもいい（と言うと語弊ありますが）自分のような人にとっては、まっとうなプログラム実行環境という意味においてJavaが適切なJSRを纏めて発展していってくれるのは、ほんとうに有難いことです。
それにしてもTomcat+Struts撲滅作戦にあんなにみんな受けたのは笑ったなー。寺田さんが全国展開してるってのも笑えるけど(^^ゞ
（同じくSeasar2も「もういいでしょ」と仰っていましたが。。。代わりのDI何がいいのか聞きそびれてしまった。。。）
 あーJavaOneまた行ってみたいなー。東京で前に参加したあれは何年だったのかな。。。確かビックサイトの会議棟でやったと思うんだけど。。。
あ、あれか、勉強会と同じで、聞く側じゃなくて喋る側に回ればいいのか！ってどんなプロダクトで行けるのかな。
 そして懇親会では、オープンソースをどうやって育てていくか、から保険の話（謎）まで、バラエティに飛んだ議論が交わされまくり大変楽しかったです。
行く前は「JavaKucheちょっと怖い」と思ってたけど(^^ゞ　みんないい人＆知った顔が多くて良かったです。沖縄の人はみんな優しいよー！
というわけで、Java界隈の盛り上がりにちょっとでも貢献できるよう、微力ながら頑張ろうと思った夜でした。</description>
    </item>
    
  </channel>
</rss>